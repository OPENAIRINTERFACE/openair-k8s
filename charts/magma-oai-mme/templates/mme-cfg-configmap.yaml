---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mme-cfg-configmap
data:
  mme.conf: |
    MME :
    {
        REALM                                     = "{{ .Release.Namespace }}.{{ .Values.mmeConf.domainName }}"
        PID_DIRECTORY                             = "/var/run";
        # Define the limits of the system in terms of served eNB and served UE.
        # When the limits will be reached, overload procedure will take place.
        MAXENB                                    = 8;                              # power of 2
        MAXUE                                     = 16;                             # power of 2
        RELATIVE_CAPACITY                         = 10;
        EMERGENCY_ATTACH_SUPPORTED                     = "no";
        UNAUTHENTICATED_IMSI_SUPPORTED                 = "no";
        # EPS network feature support
        EPS_NETWORK_FEATURE_SUPPORT_IMS_VOICE_OVER_PS_SESSION_IN_S1      = "no";    # DO NOT CHANGE
        EPS_NETWORK_FEATURE_SUPPORT_EMERGENCY_BEARER_SERVICES_IN_S1_MODE = "no";    # DO NOT CHANGE
        EPS_NETWORK_FEATURE_SUPPORT_LOCATION_SERVICES_VIA_EPC            = "no";    # DO NOT CHANGE
        EPS_NETWORK_FEATURE_SUPPORT_EXTENDED_SERVICE_REQUEST             = "no";    # DO NOT CHANGE
        # Display statistics about whole system (expressed in seconds)
        STATS_TIMER_SEC                       = 6;
        
        USE_STATELESS = "{{ .Values.mmeConf.useStateless }}";
        USE_HA = "{{ .Values.mmeConf.useHa }}";
        ENABLE_GTPU_PRIVATE_IP_CORRECTION = "{{ .Values.mmeConf.enableGtpuPrivateIpCorrection }}";
        ENABLE_CONVERGED_CORE = "{{ .Values.mmeConf.enableConvergedCore }}";

        # Congestion control configuration parameters
        CONGESTION_CONTROL_ENABLED = "{{ .Values.mmeConf.congestionControlEnabled }}";
        # Congestion control thresholds (expressed in microseconds)
        S1AP_ZMQ_TH = {{ .Values.mmeConf.s1apZmqThUs }};
        MME_APP_ZMQ_CONGEST_TH = {{ .Values.mmeConf.mmeAppZmqCongestThUs }};
        MME_APP_ZMQ_AUTH_TH = {{ .Values.mmeConf.mmeAppZmqAuthThUs }};
        MME_APP_ZMQ_IDENT_TH = {{ .Values.mmeConf.mmeAppZmqIdentThUs }};
        MME_APP_ZMQ_SMC_TH = {{ .Values.mmeConf.mmeAppZmqSmcThUs }};
        
        INTERTASK_INTERFACE :
        {
            # max queue size per task
            ITTI_QUEUE_SIZE            = 2000000;
        };
        
        S6A :
        {
            S6A_CONF                   = "{{ .Values.mmeConf.prefix }}/etc/mme_fd.conf"; # YOUR MME freeDiameter config file path
            HSS_HOSTNAME               = "{{ .Values.mmeConf.fdHssHostname }}.{{ .Values.mmeConf.hssDomainName }}"; # relevant for freeDiameter only
            HSS_REALM                  = "{{ .Values.mmeConf.hssDomainName }}"; # relevant for freeDiameter only
        };
        
        # ------- SCTP definitions
        SCTP :
        {
            # Number of streams to use in input/output
            SCTP_INSTREAMS  = 8;
            SCTP_OUTSTREAMS = 8;
        };
        
        # ------- S1AP definitions
        S1AP :
        {
            # outcome drop timer value (seconds)
            S1AP_OUTCOME_TIMER = 10;
        };
        
        # ------- MME served GUMMEIs
        # MME code DEFAULT  size = 8 bits
        # MME GROUP ID size = 16 bits
        GUMMEI_LIST = (
            { MCC="{{ .Values.mmeConf.mcc }}" ; MNC="{{ .Values.mmeConf.mnc }}"; MME_GID="{{ .Values.mmeConf.mmeGid }}" ; MME_CODE="{{ .Values.mmeConf.mmeCode }}"; }
        );
        # MME served TAIs
        # TA (mcc.mnc:tracking area code) 
        # max values = 999.999:65535
        # maximum of 16 TAIs, comma separated
        # !!! Actually use only one PLMN
        
        TAI_LIST = {{ .Values.mmeConf.taiList }} 
        
        TAC_LIST = ();
        
        # List of restricted PLMNs
        # By default this list is empty
        # Max number of restricted plmn is 10
        RESTRICTED_PLMN_LIST = ();
 
        # List of blocked IMEIs
        # By default this list is empty
        # Stored in a hash table on mme side
        # Length of IMEI=15 digits, length of IMEISV=16 digits
        BLOCKED_IMEI_LIST = ();
           
        CSFB :
        {
            NON_EPS_SERVICE_CONTROL = "{{ .Values.mmeConf.nonEpsServiceControl }}";
            CSFB_MCC = "{{ .Values.mmeConf.csfbMcc }}";
            CSFB_MNC = "{{ .Values.mmeConf.csfbMnc }}";
            LAC = "{{ .Values.mmeConf.lac }}";
        };
        
        NAS :
        {
            # 3GPP TS 33.401 section 7.2.4.3 Procedures for NAS algorithm selection
            # decreasing preference goes from left to right
            ORDERED_SUPPORTED_INTEGRITY_ALGORITHM_LIST = [ "EIA2" , "EIA1" , "EIA0" ];
            ORDERED_SUPPORTED_CIPHERING_ALGORITHM_LIST = [ "EEA0" , "EEA1" , "EEA2" ];
            # EMM TIMERS
            # T3402 start:
            # At attach failure and the attempt counter is equal to 5.
            # At tracking area updating failure and the attempt counter is equal to 5.
            # T3402 stop:
            # ATTACH REQUEST sent, TRACKING AREA REQUEST sent.
            # On expiry:
            # Initiation of the attach procedure, if still required or TAU procedure
            # attached for emergency bearer services.
            T3402                                 =  1                              # in minutes (default is 12 minutes)
            # T3412 start:
            # In EMM-REGISTERED, when EMM-CONNECTED mode is left.
            # T3412 stop:
            # When entering state EMM-DEREGISTERED or when entering EMM-CONNECTED mode.
            # On expiry:
            # Initiation of the periodic TAU procedure if the UE is not attached for
            # emergency bearer services. Implicit detach from network if the UE is
            # attached for emergency bearer services.
            T3412                                 =  54                             # in minutes (default is 54 minutes, network dependent)
            # T3422 start: DETACH REQUEST sent
            # T3422 stop: DETACH ACCEPT received
            # ON THE 1st, 2nd, 3rd, 4th EXPIRY: Retransmission of DETACH REQUEST
            T3422                                 =  6                              # in seconds (default is 6s)
            # T3450 start:
            # ATTACH ACCEPT sent, TRACKING AREA UPDATE ACCEPT sent with GUTI, TRACKING AREA UPDATE ACCEPT sent with TMSI,
            # GUTI REALLOCATION COMMAND sent
            # T3450 stop:
            # ATTACH COMPLETE received, TRACKING AREA UPDATE COMPLETE received, GUTI REALLOCATION COMPLETE received
            # ON THE 1st, 2nd, 3rd, 4th EXPIRY: Retransmission of the same message type
            T3450                                 =  6                              # in seconds (default is 6s)
            # T3460 start: AUTHENTICATION REQUEST sent, SECURITY MODE COMMAND sent
            # T3460 stop:
            # AUTHENTICATION RESPONSE received, AUTHENTICATION FAILURE received,
            # SECURITY MODE COMPLETE received, SECURITY MODE REJECT received
            # ON THE 1st, 2nd, 3rd, 4th EXPIRY: Retransmission of the same message type
            T3460                                 =  6                              # in seconds (default is 6s)
            # T3470 start: IDENTITY REQUEST sent
            # T3470 stop: IDENTITY RESPONSE received
            # ON THE 1st, 2nd, 3rd, 4th EXPIRY: Retransmission of IDENTITY REQUEST
            T3470                                 =  6                              # in seconds (default is 6s)
            # ESM TIMERS
            T3485                                 =  8                              # UNUSED in seconds (default is 8s)
            T3486                                 =  8                              # UNUSED in seconds (default is 8s)
            T3489                                 =  4                              # UNUSED in seconds (default is 4s)
            T3495                                 =  8                              # UNUSED in seconds (default is 8s)
            # APN CORRECTION FEATURE
            ENABLE_APN_CORRECTION                 = "false"
            APN_CORRECTION_MAP_LIST               = (  );
        };
        SGS :
        {
            # TS6_1 start: SGSAP LOCATION UPDATE REQUEST sent
            # TS6_1 stop: SGSAP LOCATION UPDATE ACCEPT received,SGSAP LOCATION UPDATE REJECT received
            TS6_1                                 =  10                             # in seconds (default is 10s)

            # TS8 start: SGSAP EPS DETACH INDICATION explicit detach sent for EPS services
            # TS8 stop: SGSAP EPS DETACH ACK  received
            TS8                                   =  4                              # in seconds (default is 4s)

            # TS9 start: SGSAP IMSI DETACH INDICATION explicit detach sent for non-EPS services
            # TS9 stop:  SGSAP IMSI DETACH ACK received
            # changed the Ts9 default value to 2s since the T3421 ue detach timer value is 5s
            # To avoid retransmission of UE detach message and small delay to wait for sgs detach retransmission
            TS9                                   =  2                              # in seconds (default is 4s)

            # TS10 start: SGSAP IMSI DETACH INDICATION implicit detach sent for non-EPS services
            # TS10 stop: SGSAP EPS DETACH ACK  received
            TS10                                   =  4                              # in seconds (default is 4s)

            # TS13 start: SGSAP EPS DETACH INDICATION implicit detach sent for EPS services
            # TS13 stop: SGSAP EPS DETACH ACK  received
            TS13                                   =  4                              # in seconds (default is 4s)


        };
        NETWORK_INTERFACES :
        {
            # MME binded interface for S1-C or S1-MME  communication (S1AP), can be ethernet interface, virtual ethernet interface,
            # we don't advise wireless interfaces
            MME_INTERFACE_NAME_FOR_S1_MME         = "{{ .Values.mmeConf.s1apIfaceName }}";
            MME_IPV4_ADDRESS_FOR_S1_MME           = {{- cat .Values.mmeConf.mmeIpS1c "/" .Values.mmeConf.mmeNetmaskS1c | nospace | quote }};

            # MME binded interface for S11 communication (GTPV2-C)
            MME_INTERFACE_NAME_FOR_S11_MME        = "{{ .Values.mmeConf.s11IfaceName }}";
            MME_IPV4_ADDRESS_FOR_S11_MME          = {{- cat .Values.mmeConf.mmeIpS11 "/" .Values.mmeConf.mmeNetmaskS11 | nospace | quote }};
            MME_PORT_FOR_S11_MME                  = {{ .Values.service.gtpcPort }};
        };
        LOGGING :
        {
            # OUTPUT choice in { "CONSOLE", "SYSLOG", `path to file`", "`IPv4@`:`TCP port num`"}
            # `path to file` must start with '.' or '/'
            # if TCP stream choice, then you can easily dump the traffic on the remote or local host: nc -l `TCP port num` > received.txt
            #OUTPUT            = "CONSOLE";
            #OUTPUT            = "SYSLOG";
            OUTPUT            = "/var/log/mme.log";
            #OUTPUT            = "127.0.0.1:5656";
            # THREAD_SAFE choice in { "yes", "no" } means use of thread safe intermediate buffer then a single thread pick each message log one
            # by one to flush it to the chosen output
            THREAD_SAFE       = "no";
            # COLOR choice in { "yes", "no" } means use of ANSI styling codes or no
            COLOR             = "no";
            # Log level choice in { "EMERGENCY", "ALERT", "CRITICAL", "ERROR", "WARNING", "NOTICE", "INFO", "DEBUG", "TRACE"}
            SCTP_LOG_LEVEL     = "{{ .Values.mmeConf.oaiLogLevel }}";
            GTPV1U_LOG_LEVEL   = "{{ .Values.mmeConf.oaiLogLevel }}";
            SPGW_APP_LOG_LEVEL = "{{ .Values.mmeConf.oaiLogLevel }}";
            UDP_LOG_LEVEL      = "{{ .Values.mmeConf.oaiLogLevel }}";
            S1AP_LOG_LEVEL     = "{{ .Values.mmeConf.oaiLogLevel }}";
            NAS_LOG_LEVEL      = "{{ .Values.mmeConf.oaiLogLevel }}";
            MME_APP_LOG_LEVEL  = "{{ .Values.mmeConf.oaiLogLevel }}";
            GTPV2C_LOG_LEVEL   = "{{ .Values.mmeConf.oaiLogLevel }}";
            S11_LOG_LEVEL      = "{{ .Values.mmeConf.oaiLogLevel }}";
            S6A_LOG_LEVEL      = "{{ .Values.mmeConf.oaiLogLevel }}";
            UTIL_LOG_LEVEL     = "{{ .Values.mmeConf.oaiLogLevel }}";
            MSC_LOG_LEVEL      = "ERROR";
            ITTI_LOG_LEVEL     = "ERROR";
            MME_SCENARIO_PLAYER_LOG_LEVEL = "ERROR";
            # ASN1 VERBOSITY: none, info, annoying
            # for S1AP protocol
            # Won't be templatized because its value space is different
            ASN1_VERBOSITY    = "INFO";
        };
        TESTING :
        {
            # file should be copied here from source tree by following command: run_mme --install-mme-files ...
            SCENARIO_FILE = "/usr/local/share/oai/test/MME/no_regression.xml";
        };
        S-GW :
        {
        # S-GW binded interface for S11 communication (GTPV2-C), if none selected the ITTI message interface is used
          SGW_IPV4_ADDRESS_FOR_S11              = "{{ .Values.mmeConf.remoteSgwIp }}";
        };
        
 
        FEDERATED_MODE_MAP = (
          # ModeMapItem values can be found at magma/lte/protos/mconfig/mconfigs.proto
          );

        SRVC_AREA_CODE_2_TACS_MAP = ();
        SENTRY_CONFIG = {};
    };

